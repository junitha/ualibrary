<?php

/**
 * @file
 * Contains tests for the Reference option limit module.
 */

/**
 * Test use of the module with term reference fields.
 */
class ReferenceOptionLimitTaxonomyTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Reference Option Limit taxonomy term'),
      'description' => t('Tests behaviour with taxonomy term reference fields.'),
      'group' => t('Reference Option Limit'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp(array('reference_option_limit', 'reference_option_limit_test_taxonomy'));

    // Create our creator user.
    $this->user = $this->drupalCreateUser(array(
      'administer nodes',
      'create test_rol_node_taxo content',
      'edit any test_rol_node_taxo content',
    ));
    $this->drupalLogin($this->user);
  }

  /**
   * Test the module's functionality.
   */
  function testNodeCreateForm() {
    $this->drupalGet('node/add/test-rol-node-taxo');

    // Get a country term.
    $terms = taxonomy_get_term_by_name('France', 'countries');
    $country_term = array_pop($terms);

    $edit = array(
      'test_rol_country[und]' => $country_term->tid,
    );

    $this->drupalPostAJAX(NULL, $edit, 'test_rol_country[und]');

    // The AJAX post updates the content our assertions test against.
    // Check each term: all the cities in France should be present; all the
    // others should not.
    foreach (reference_option_limit_test_taxonomy_cities() as $city_name => $country_name) {
      if ($country_name == 'France') {
        $this->assertText($city_name, "The $city_name term was found in the form.");
      }
      else {
        $this->assertNoText($city_name, "The $city_name term was not found in the form.");
      }
    }

    // Get a country term.
    $terms = taxonomy_get_term_by_name('Italy', 'countries');
    $country_term = array_pop($terms);

    $edit = array(
      'test_rol_country[und]' => $country_term->tid,
    );

    // Change the country we have selected.
    $this->drupalPostAJAX(NULL, $edit, 'test_rol_country[und]');

    foreach (reference_option_limit_test_taxonomy_cities() as $city_name => $country_name) {
      if ($country_name == 'Italy') {
        $this->assertText($city_name, "The $city_name term was found in the form.");
      }
      else {
        $this->assertNoText($city_name, "The $city_name term was not found in the form.");
      }
    }

    // Save the node.
    $terms = taxonomy_get_term_by_name('Firenze', 'cities');
    $city_term = array_pop($terms);

    $edit = array(
      'title' => $this->randomName(),
      // Use the most recent country term.
      'test_rol_country[und]' => $country_term->tid,
      "test_rol_city[und][{$city_term->tid}]" => 1,
    );

    $this->drupalPost(NULL, $edit, t('Save'));

    // The URL is of the form http://example.com/node/NID.
    $url = $this->getUrl();
    $pieces = explode('/', $url);
    $nid = array_pop($pieces);

    $node = node_load($nid);

    $this->assertEqual($node->test_rol_country[LANGUAGE_NONE][0]['tid'], $country_term->tid, "The node has its country field value set.");
    $this->assertEqual($node->test_rol_city[LANGUAGE_NONE][0]['tid'], $city_term->tid, "The node has its city field value set.");
  }

  /**
   * Test the node edit form.
   */
  function testNodeEditForm() {
    // Get country and city terms.
    $terms = taxonomy_get_term_by_name('Italy', 'countries');
    $country_term = array_pop($terms);
    $terms = taxonomy_get_term_by_name('Firenze', 'cities');
    $city_term = array_pop($terms);

    // Create a node: Italy, Firenze.
    $edit = array(
      'uid'      => $this->user->uid,
      'name'     => $this->user->name,
      'type'     => 'test_rol_node_taxo',
      'language' => LANGUAGE_NONE,
      'title'    => $this->randomName(),
    );

    $edit['test_rol_country'][LANGUAGE_NONE][0]['tid'] = $country_term->tid;
    $edit['test_rol_city'][LANGUAGE_NONE][0]['tid'] = $city_term->tid;

    $node = (object) $edit;

    node_save($node);

    // Edit the node.
    $this->drupalGet("node/{$node->nid}/edit");

    foreach (reference_option_limit_test_taxonomy_cities() as $city_name => $country_name) {
      if ($country_name == 'Italy') {
        $this->assertText($city_name, "The $city_name term was found in the form.");
      }
      else {
        $this->assertNoText($city_name, "The $city_name term was not found in the form.");
      }
    }

    // Get a country term.
    $terms = taxonomy_get_term_by_name('France', 'countries');
    $country_term = array_pop($terms);

    $edit = array(
      'test_rol_country[und]' => $country_term->tid,
    );

    // Change the country we have selected in the form: France.
    $this->drupalPostAJAX(NULL, $edit, 'test_rol_country[und]');

    foreach (reference_option_limit_test_taxonomy_cities() as $city_name => $country_name) {
      if ($country_name == 'France') {
        $this->assertText($city_name, "The $city_name term was found in the form.");
      }
      else {
        $this->assertNoText($city_name, "The $city_name term was not found in the form.");
      }
    }

    $terms = taxonomy_get_term_by_name('Paris', 'cities');
    $city_term = array_pop($terms);

    // Save the form with France, Paris.
    $edit = array(
      'test_rol_country[und]' => $country_term->tid,
      "test_rol_city[und][{$city_term->tid}]" => 1,
    );

    $this->drupalPost(NULL, $edit, t('Save'));

    entity_get_controller('node')->resetCache();

    $node = node_load($node->nid);

    $this->assertEqual($node->test_rol_country[LANGUAGE_NONE][0]['tid'], $country_term->tid, "The node's country was updated.");
    $this->assertEqual($node->test_rol_city[LANGUAGE_NONE][0]['tid'], $city_term->tid, "The node's city was updated.");
  }

}

/**
 * Common base class for test cases that use entityreference fields.
 */
abstract class ReferenceOptionLimitEntityreferenceTestCaseBase extends DrupalWebTestCase {

  /**
   * Helper for getting a node by title.
   *
   * This works for retrieving both country and city nodes.
   *
   * @param $node_title
   *  The title of the node to get.
   *
   * @return
   *  A node entity.
   */
  protected function getNodeByTitle($title) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->propertyCondition('title', $title);
    $result = $query->execute();
    // We expect only one node to satisfy this query.
    $nids = array_keys($result['node']);
    $node = node_load(array_pop($nids));

    $this->assertTrue($node, "Node with the given title was found.");

    return $node;
  }

}

/**
 * Test use of the module with entityreference fields.
 */
class ReferenceOptionLimitEntityreferenceTestCase extends ReferenceOptionLimitEntityreferenceTestCaseBase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Reference Option Limit entityreference'),
      'description' => t('Tests behaviour with entityreference fields.'),
      'group' => t('Reference Option Limit'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp(array('reference_option_limit', 'reference_option_limit_test_entityreference'));

    // Create our creator user.
    $this->user = $this->drupalCreateUser(array(
      'administer nodes',
      'create test_rol_node_article content',
      'edit any test_rol_node_article content',
    ));
    $this->drupalLogin($this->user);
  }

  /**
   * Test the functionality on a node create form.
   */
  function testNodeCreateForm() {
    $this->drupalGet('node/add/test-rol-node-article');

    // Get a country node.
    $country_node = $this->getNodeByTitle('France');

    $edit = array(
      'test_rol_er_country[und]' => $country_node->nid,
    );

    $this->drupalPostAJAX(NULL, $edit, 'test_rol_er_country[und]');

    // The AJAX post updates the content our assertions test against.
    // Check each term: all the cities in France should be present; all the
    // others should not.
    foreach (reference_option_limit_test_entityreference_cities() as $city_name => $country_name) {
      if ($country_name == 'France') {
        $this->assertText($city_name, "The $city_name node was found in the form.");
      }
      else {
        $this->assertNoText($city_name, "The $city_name node was not found in the form.");
      }
    }

    // Get a country node.
    $country_node = $this->getNodeByTitle('Italy');

    $edit = array(
      'test_rol_er_country[und]' => $country_node->nid,
    );

    // Change the country we have selected.
    $this->drupalPostAJAX(NULL, $edit, 'test_rol_er_country[und]');

    foreach (reference_option_limit_test_entityreference_cities() as $city_name => $country_name) {
      if ($country_name == 'Italy') {
        $this->assertText($city_name, "The $city_name node was found in the form.");
      }
      else {
        $this->assertNoText($city_name, "The $city_name node was not found in the form.");
      }
    }

    // Save the node.
    $city_node = $this->getNodeByTitle('Firenze');

    $edit = array(
      'title' => $this->randomName(),
      // Use the most recent country node.
      'test_rol_er_country[und]' => $country_node->nid,
      "test_rol_er_city[und][{$city_node->nid}]" => 1,
    );

    $this->drupalPost(NULL, $edit, t('Save'));

    // The URL is of the form http://example.com/node/NID.
    $url = $this->getUrl();
    $pieces = explode('/', $url);
    $nid = array_pop($pieces);

    $node = node_load($nid);

    $this->assertEqual($node->test_rol_er_country[LANGUAGE_NONE][0]['target_id'], $country_node->nid, "The node has its country field value set.");
    $this->assertEqual($node->test_rol_er_city[LANGUAGE_NONE][0]['target_id'], $city_node->nid, "The node has its city field value set.");
  }

}
